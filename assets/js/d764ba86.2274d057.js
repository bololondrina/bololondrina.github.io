"use strict";(self.webpackChunkifood_github_io=self.webpackChunkifood_github_io||[]).push([[211],{7091:(e,i,s)=>{s.r(i),s.d(i,{default:()=>h});var t={};s.r(t);var a=s(6540),n=s(781),o=s(4586),r=s(5925),c=s(53);const l={center_img:"center_img_OSkz"};var d=s(4848);function h(){const{siteConfig:e}=(0,o.A)(),i=(0,a.useMemo)((()=>new r.C(e)),[]),[s,h]=(0,a.useState)(!0),[u,g]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{const e=window.location.search,s=new URLSearchParams(e).get("code");if(!s)return console.log("an error was found!"),void h(!1);(async()=>{try{const e=await i.signCla(s);g(e)}catch(e){console.log(e)}finally{h(!1)}})()}),[]),(0,d.jsx)(n.A,{title:"Auth",description:"Find out about all of the projects of iFood Open Source.",children:(0,d.jsx)("main",{className:"padding-top--lg padding-bottom--xl",children:(0,d.jsxs)("div",{className:"container",children:[s&&(0,d.jsx)("div",{className:"row",children:(0,d.jsxs)("div",{className:"col",children:[(0,d.jsx)("h1",{children:"Just a moment"}),(0,d.jsx)("p",{children:"We're getting it done..."})]})}),u&&(0,d.jsxs)("div",{className:"row",children:[(0,d.jsxs)("div",{className:"col",children:[(0,d.jsx)("h1",{children:"Well done"}),(0,d.jsxs)("p",{children:["Thanks for signing the CLA. It's a pleasure have you as contribuitor. Learn more about iFood Open Source"," ",(0,d.jsx)(t.Link,{to:"/",children:"here"})]})]}),(0,d.jsx)("div",{className:(0,c.A)("col",l.center_img),children:(0,d.jsx)("img",{src:"/img/undraw_completing.svg"})})]}),!s&&!u&&(0,d.jsx)("div",{className:"row",children:(0,d.jsxs)("div",{className:"col",children:[(0,d.jsx)("h1",{children:"Ops"}),(0,d.jsx)("p",{children:"Try again later..."})]})})]})})})}},5925:(e,i,s)=>{s.d(i,{C:()=>n});var t=s(2505),a=s.n(t);class n{constructor(e){this.siteConfig=e,this.env=e.customFields,this.api=a().create({baseURL:this.env.ifoodServiceUrl})}getGHCodeUrl(){return`${this.env.githubUrl}/authorize?scope=user:email&client_id=${this.env.githubClientId}&redirect_uri=${this.siteConfig.url}/auth`}async getClaText(){const{data:e}=await a().get(this.env.claUrl);return e}async signCla(e){let i=!1;try{const{data:s}=await this.api.post("/github/login",{code:e}),{data:t}=await this.api.post("/contributor",{},{headers:{authorization:s}});i=!0}catch(s){console.log(s)}return i}}}}]);